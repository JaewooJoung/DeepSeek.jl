name: CI
on:
  push:
    branches:
      - master
      - dev
      - 'release-*'
    tags:
      - '*'
  pull_request:
    branches:
      - master
  workflow_dispatch:
concurrency:
  # Skip intermediate builds: always.
  # Cancel intermediate builds: only if it is a pull request build.
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ startsWith(github.ref, 'refs/pull/') }}
jobs:
  test:
    name: Test ${{ matrix.title }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    permissions: # needed to allow julia-actions/cache to proactively delete old caches that it has created
      actions: write
      contents: read
    strategy:
      fail-fast: false
      matrix:
        include:
          - title: 'Linux - Latest'
            os: ubuntu-latest
            version: '1'
            arch: x64
    steps:
      - uses: actions/checkout@v4
      - uses: julia-actions/setup-julia@v2
        with:
          version: ${{ matrix.version }}
          arch: ${{ matrix.arch }}
      - uses: julia-actions/cache@v2
      - uses: julia-actions/julia-buildpkg@v1
      - uses: julia-actions/julia-runtest@v1
      - uses: julia-actions/julia-processcoverage@v1
      - name: Install LocalCoverage
        shell: julia {0}
        run: |
          using Pkg
          Pkg.add(PackageSpec(name="LocalCoverage"))
          Pkg.add(PackageSpec(name="CoverageTools"))
      - name: Show coverage info
        shell: julia {0}
        run: |
          import CoverageTools
          import LocalCoverage
          coverage = CoverageTools.LCOV.readfile("lcov.info")
          report = LocalCoverage.eval_coverage_metrics(coverage, ".")
          show(report)
      - uses: codecov/codecov-action@v5
        with:
          files: lcov.info
          token: ${{ secrets.CODECOV_TOKEN }}
      - name: Save Julia depot cache on cancel or failure
        id: julia-cache-save
        if: cancelled() || failure()
        uses: actions/cache/save@v4
        with:
          path: |
            ${{ steps.julia-cache.outputs.cache-paths }}
          key: ${{ steps.julia-cache.outputs.cache-key }}
  codestyle:
    name: Codestyle
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: julia-actions/setup-julia@v2
        with:
          version: '1'
      - name: Install JuliaFormatter and format
        shell: julia {0}
        run: |
          using Pkg
          Pkg.add(PackageSpec(name="JuliaFormatter"))
          using JuliaFormatter
          format(["src", "test"], verbose=true)
      - name: Format Check
        shell: julia {0}
        run: |
          out = Cmd(`git diff -U0`) |> read |> String
          if out == ""
              exit(0)
          else
              @error "Some files have not been formatted !!!\n\n$out"
              exit(1)
          end
